'use client'

import { useState } from 'react'
import { BookOpen, Clock, Target, FileText, Trophy, Users, Brain, Zap } from 'lucide-react'
import PDDTestAdvanced from '../../components/PDDTestAdvanced'

interface TestMode {
  id: 'study' | 'exam' | 'review' | 'ticket'
  name: string
  description: string
  duration: string
  questions: number
  icon: React.ReactNode
  color: string
}

interface TestCategory {
  id: string
  name: string
  description: string
  questionsAvailable: number
  difficulty: 'easy' | 'medium' | 'hard'
}

interface TestResult {
  totalQuestions: number
  correctAnswers: number
  timeSpent: number
  passed: boolean
}

const OnlineTestsPage = () => {
  const [selectedMode, setSelectedMode] = useState<string | null>(null)
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)
  const [selectedTicket, setSelectedTicket] = useState<number | null>(null)
  const [testStarted, setTestStarted] = useState(false)

  const testModes: TestMode[] = [
    {
      id: 'study',
      name: '–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è',
      description: '–ò–∑—É—á–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞.',
      duration: '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π',
      questions: 10,
      icon: <BookOpen className="w-8 h-8" />,
      color: 'blue'
    },
    {
      id: 'exam',
      name: '–≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º',
      description: '–†–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —ç–∫–∑–∞–º–µ–Ω–∞ –≤ –ì–ò–ë–î–î —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏. –°–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.',
      duration: '20 –º–∏–Ω—É—Ç',
      questions: 20,
      icon: <Clock className="w-8 h-8" />,
      color: 'red'
    },
    {
      id: 'ticket',
      name: '–ë–∏–ª–µ—Ç—ã –ü–î–î',
      description: '–†–µ—à–∞–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã. 40 –±–∏–ª–µ—Ç–æ–≤ –ø–æ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–º.',
      duration: '20 –º–∏–Ω—É—Ç',
      questions: 20,
      icon: <FileText className="w-8 h-8" />,
      color: 'purple'
    },
    {
      id: 'review',
      name: '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ',
      description: '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –æ—à–∏–±–æ–∫. –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.',
      duration: '15 –º–∏–Ω—É—Ç',
      questions: 15,
      icon: <Target className="w-8 h-8" />,
      color: 'green'
    }
  ]

  const testCategories: TestCategory[] = [
    {
      id: 'all',
      name: '–í—Å–µ —Ç–µ–º—ã',
      description: '–°–º–µ—à–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –ü–î–î',
      questionsAvailable: 800,
      difficulty: 'medium'
    },
    {
      id: 'general',
      name: '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è',
      description: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –∏ —Ç–µ—Ä–º–∏–Ω—ã –ü–î–î',
      questionsAvailable: 120,
      difficulty: 'easy'
    },
    {
      id: 'signals',
      name: '–î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã',
      description: '–ó–Ω–∞–∫–∏, —Ä–∞–∑–º–µ—Ç–∫–∞, —Å–∏–≥–Ω–∞–ª—ã —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞ –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞',
      questionsAvailable: 180,
      difficulty: 'medium'
    },
    {
      id: 'traffic',
      name: '–î–≤–∏–∂–µ–Ω–∏–µ –∏ –º–∞–Ω–µ–≤—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ü—Ä–∞–≤–∏–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è, –æ–±–≥–æ–Ω, –ø–æ–≤–æ—Ä–æ—Ç, —Ä–∞–∑–≤–æ—Ä–æ—Ç',
      questionsAvailable: 160,
      difficulty: 'hard'
    },
    {
      id: 'priority',
      name: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è',
      description: '–ü—Ä–æ–µ–∑–¥ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–≤, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏',
      questionsAvailable: 140,
      difficulty: 'hard'
    },
    {
      id: 'parking',
      name: '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —Å—Ç–æ—è–Ω–∫–∞',
      description: '–ü—Ä–∞–≤–∏–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å—Ç–æ—è–Ω–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
      questionsAvailable: 100,
      difficulty: 'medium'
    },
    {
      id: 'safety',
      name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è',
      description: '–û—Å–≤–µ—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–≤–æ–∑–∫–∞ –≥—Ä—É–∑–æ–≤ –∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
      questionsAvailable: 100,
      difficulty: 'medium'
    }
  ]

  const handleTestComplete = (result: TestResult) => {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ localStorage –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:', result)
  }

  const startTest = () => {
    if ((selectedMode === 'ticket' && selectedTicket) || (selectedMode !== 'ticket' && selectedCategory)) {
      setTestStarted(true)
    }
  }

  const resetTest = () => {
    setTestStarted(false)
    setSelectedMode(null)
    setSelectedCategory(null)
    setSelectedTicket(null)
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'text-green-600 bg-green-100'
      case 'medium': return 'text-yellow-600 bg-yellow-100'
      case 'hard': return 'text-red-600 bg-red-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  const getColorClasses = (color: string) => {
    const colors = {
      blue: 'border-blue-200 hover:border-blue-400 hover:bg-blue-50',
      red: 'border-red-200 hover:border-red-400 hover:bg-red-50',
      green: 'border-green-200 hover:border-green-400 hover:bg-green-50',
      purple: 'border-purple-200 hover:border-purple-400 hover:bg-purple-50'
    }
    return colors[color as keyof typeof colors] || colors.blue
  }

  if (testStarted) {
    return (
      <PDDTestAdvanced
        category={selectedCategory || 'all'}
        testMode={selectedMode as 'exam' | 'study' | 'review' | 'ticket'}
        ticketNumber={selectedTicket || undefined}
        onComplete={handleTestComplete}
      />
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 pt-20">
      <div className="container mx-auto px-4 py-12">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            üìö –û–Ω–ª–∞–π–Ω —Ç–µ—Å—Ç—ã –ü–î–î
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –ü–æ–ª–Ω–∞—è –±–∞–∑–∞ –∏–∑ <span className="font-bold text-blue-600">800 –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</span> –ü–î–î –†–§. 
            40 —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–æ—Ä–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.
          </p>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-12">
          <div className="bg-white rounded-lg p-4 text-center shadow-md">
            <div className="text-2xl font-bold text-blue-600">800</div>
            <div className="text-sm text-gray-600">–í–æ–ø—Ä–æ—Å–æ–≤</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-md">
            <div className="text-2xl font-bold text-green-600">40</div>
            <div className="text-sm text-gray-600">–ë–∏–ª–µ—Ç–æ–≤</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-md">
            <div className="text-2xl font-bold text-purple-600">7</div>
            <div className="text-sm text-gray-600">–ö–∞—Ç–µ–≥–æ—Ä–∏–π</div>
          </div>
          <div className="bg-white rounded-lg p-4 text-center shadow-md">
            <div className="text-2xl font-bold text-orange-600">4</div>
            <div className="text-sm text-gray-600">–†–µ–∂–∏–º–∞</div>
          </div>
        </div>

        {!selectedMode ? (
          /* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */
          <div>
            <h2 className="text-2xl font-bold text-gray-800 mb-8 text-center">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {testModes.map((mode) => (
                <div
                  key={mode.id}
                  onClick={() => setSelectedMode(mode.id)}
                  className={`bg-white rounded-xl p-6 border-2 cursor-pointer transition-all duration-200 ${getColorClasses(mode.color)}`}
                >
                  <div className="flex items-start gap-4">
                    <div className={`text-${mode.color}-500 flex-shrink-0`}>
                      {mode.icon}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-xl font-bold text-gray-800 mb-2">{mode.name}</h3>
                      <p className="text-gray-600 mb-4">{mode.description}</p>
                      <div className="flex justify-between items-center text-sm">
                        <span className="bg-gray-100 px-3 py-1 rounded-full">
                          üìù {mode.questions} –≤–æ–ø—Ä–æ—Å–æ–≤
                        </span>
                        <span className="bg-gray-100 px-3 py-1 rounded-full">
                          ‚è±Ô∏è {mode.duration}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : selectedMode === 'ticket' ? (
          /* –í—ã–±–æ—Ä –±–∏–ª–µ—Ç–∞ */
          <div>
            <div className="flex items-center justify-between mb-8">
              <h2 className="text-2xl font-bold text-gray-800">
                –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–ª–µ—Ç –ü–î–î
              </h2>
              <button
                onClick={() => setSelectedMode(null)}
                className="text-gray-600 hover:text-gray-800"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
              {Array.from({ length: 40 }, (_, i) => i + 1).map((ticketNum) => (
                <button
                  key={ticketNum}
                  onClick={() => setSelectedTicket(ticketNum)}
                  className={`p-4 rounded-lg border-2 transition-all duration-200 ${
                    selectedTicket === ticketNum
                      ? 'border-purple-500 bg-purple-50 text-purple-800'
                      : 'border-gray-200 hover:border-purple-300 hover:bg-purple-50'
                  }`}
                >
                  <div className="text-lg font-bold">#{ticketNum}</div>
                  <div className="text-xs text-gray-600">20 –≤–æ–ø—Ä–æ—Å–æ–≤</div>
                </button>
              ))}
            </div>
            {selectedTicket && (
              <div className="mt-8 text-center">
                <div className="bg-white rounded-lg p-6 inline-block shadow-md">
                  <h3 className="text-xl font-bold text-gray-800 mb-2">
                    –ë–∏–ª–µ—Ç #{selectedTicket}
                  </h3>
                  <p className="text-gray-600 mb-4">20 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Ä¢ 20 –º–∏–Ω—É—Ç ‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ì–ò–ë–î–î</p>
                  <button
                    onClick={startTest}
                    className="bg-purple-500 text-white px-8 py-3 rounded-lg hover:bg-purple-600 transition-colors font-semibold"
                  >
                    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            )}
          </div>
        ) : (
          /* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
          <div>
            <div className="flex items-center justify-between mb-8">
              <h2 className="text-2xl font-bold text-gray-800">
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤
              </h2>
              <button
                onClick={() => setSelectedMode(null)}
                className="text-gray-600 hover:text-gray-800"
              >
                ‚Üê –ù–∞–∑–∞–¥
              </button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {testCategories.map((category) => (
                <div
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`bg-white rounded-xl p-6 border-2 cursor-pointer transition-all duration-200 ${
                    selectedCategory === category.id
                      ? 'border-blue-500 bg-blue-50'
                      : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                  }`}
                >
                  <div className="flex justify-between items-start mb-3">
                    <h3 className="text-lg font-bold text-gray-800">{category.name}</h3>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(category.difficulty)}`}>
                      {category.difficulty === 'easy' ? '–õ–µ–≥–∫–æ' : 
                       category.difficulty === 'medium' ? '–°—Ä–µ–¥–Ω–µ' : '–°–ª–æ–∂–Ω–æ'}
                    </span>
                  </div>
                  <p className="text-gray-600 text-sm mb-4">{category.description}</p>
                  <div className="flex justify-between items-center text-sm">
                    <span className="bg-gray-100 px-3 py-1 rounded-full">
                      üìä {category.questionsAvailable} –≤–æ–ø—Ä–æ—Å–æ–≤
                    </span>
                  </div>
                </div>
              ))}
            </div>

            {selectedCategory && (
              <div className="mt-8 text-center">
                <div className="bg-white rounded-lg p-6 inline-block shadow-md">
                  <h3 className="text-xl font-bold text-gray-800 mb-2">
                    {testModes.find(m => m.id === selectedMode)?.name}
                  </h3>
                  <p className="text-gray-600 mb-2">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {testCategories.find(c => c.id === selectedCategory)?.name}
                  </p>
                  <p className="text-gray-600 mb-4">
                    {testModes.find(m => m.id === selectedMode)?.questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Ä¢ {testModes.find(m => m.id === selectedMode)?.duration}
                  </p>
                  <button
                    onClick={startTest}
                    className="bg-blue-500 text-white px-8 py-3 rounded-lg hover:bg-blue-600 transition-colors font-semibold"
                  >
                    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
        <div className="mt-16 bg-white rounded-xl p-8 shadow-lg">
          <h3 className="text-2xl font-bold text-gray-800 mb-6 text-center">
            üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div className="text-center">
              <Trophy className="w-12 h-12 text-yellow-500 mx-auto mb-3" />
              <h4 className="font-bold text-gray-800 mb-2">–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h4>
              <p className="text-gray-600 text-sm">–í—Å–µ 800 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∞–∑—ã –ì–ò–ë–î–î –†–§</p>
            </div>
            <div className="text-center">
              <Users className="w-12 h-12 text-blue-500 mx-auto mb-3" />
              <h4 className="font-bold text-gray-800 mb-2">–†–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h4>
              <p className="text-gray-600 text-sm">–ü–æ–¥–ª–∏–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Ä–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π</p>
            </div>
            <div className="text-center">
              <Brain className="w-12 h-12 text-green-500 mx-auto mb-3" />
              <h4 className="font-bold text-gray-800 mb-2">–ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è</h4>
              <p className="text-gray-600 text-sm">–†–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ü–î–î</p>
            </div>
            <div className="text-center">
              <Zap className="w-12 h-12 text-purple-500 mx-auto mb-3" />
              <h4 className="font-bold text-gray-800 mb-2">–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –±–∞–∑–∞</h4>
              <p className="text-gray-600 text-sm">–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –ü–î–î</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default OnlineTestsPage 